
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '240874C388C30A4419B3600B02854F73'
    
_lr_action_items = {'OP_DIV':([13,],[20,]),'OP_SUB':([13,],[21,]),'INPUT':([13,],[22,]),'IMPORT':([6,],[10,]),'ID':([1,7,10,11,12,13,14,15,16,18,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,57,58,],[7,12,17,12,-26,23,-27,-28,-9,-8,12,12,35,12,12,35,42,12,12,-30,12,35,-15,-11,-17,50,12,-21,12,35,-13,12,12,-25,-29,-23,-14,-10,56,-18,-20,-22,-12,-24,-19,-16,]),'$end':([2,3,4,5,8,9,19,28,],[-4,-1,-5,0,-3,-2,-7,-6,]),'LPAREN':([0,2,3,4,7,8,9,11,12,14,15,16,18,19,20,21,22,23,24,25,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,51,52,53,55,57,58,],[6,-4,6,-5,13,-3,-2,13,-26,-27,-28,-9,-8,-7,13,13,36,13,13,36,13,-6,13,-30,13,36,-15,-11,-17,13,-21,13,36,-13,13,13,-25,-29,-23,-14,-10,-20,-22,-12,-24,-19,-16,]),'LBRACE':([0,2,3,4,8,9,19,28,],[1,-4,1,-5,-3,-2,-7,-6,]),'NUMBER':([7,11,12,14,15,16,18,20,21,23,24,27,29,30,31,34,37,38,39,41,42,43,44,45,46,48,51,52,53,55,57,],[14,14,-26,-27,-28,-9,-8,14,14,14,14,14,14,-30,14,-11,14,-21,14,-13,14,14,-25,-29,-23,-10,-20,-22,-12,-24,-19,]),'OP_ADD':([13,],[24,]),'STRING':([7,11,12,14,15,16,18,20,21,23,24,27,29,30,31,34,37,38,39,41,42,43,44,45,46,48,51,52,53,55,57,],[15,15,-26,-27,-28,-9,-8,15,15,15,15,15,15,-30,15,-11,15,-21,15,-13,15,15,-25,-29,-23,-10,-20,-22,-12,-24,-19,]),'RPAREN':([12,14,15,17,22,23,25,29,30,31,32,33,34,35,37,38,39,40,41,43,44,45,46,47,48,51,52,53,54,55,56,57,58,],[-26,-27,-28,28,34,38,41,44,-30,46,48,-15,-11,-17,51,-21,52,53,-13,55,-25,-29,-23,-14,-10,-20,-22,-12,57,-24,58,-19,-16,]),'ASSIGN':([13,],[26,]),'OUTPUT':([13,],[25,]),'OP_MUL':([13,],[27,]),'RBRACE':([11,12,14,15,16,18,34,38,41,44,46,48,51,52,53,55,57,],[19,-26,-27,-28,-9,-8,-11,-21,-13,-25,-23,-10,-20,-22,-12,-24,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaration_list':([22,25,],[32,40,]),'declaration':([22,25,32,40,],[33,33,47,47,]),'expression_list':([7,],[11,]),'import_statement':([0,3,],[2,8,]),'type':([36,],[49,]),'parameter_list':([20,21,23,24,27,],[29,31,37,39,43,]),'statement_list':([0,],[3,]),'expression':([7,11,20,21,23,24,27,29,31,37,39,42,43,],[16,18,30,30,30,30,30,45,45,45,45,54,45,]),'program':([0,],[5,]),'component':([0,3,],[4,9,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',24),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',28),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',32),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',33),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_input','parser.py',41),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_input','parser.py',42),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_output','parser.py',49),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_output','parser.py',50),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',57),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',58),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',66),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',67),
  ('type -> ID','type',1,'p_type','parser.py',74),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assign','parser.py',78),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_funcexpr','parser.py',82),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_funcexpr','parser.py',83),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op','parser.py',90),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op','parser.py',91),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op','parser.py',92),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op','parser.py',93),
  ('expression -> ID','expression',1,'p_exprid','parser.py',97),
  ('expression -> NUMBER','expression',1,'p_literal','parser.py',101),
  ('expression -> STRING','expression',1,'p_literal','parser.py',102),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',106),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',107),
]
